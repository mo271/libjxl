# Copyright (c) the JPEG XL Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Workflow for building and then debugging on a specific commit.

name: Build and Test debugging
on:
  push:
    branches:
      - ci-*-debug

permissions:
  contents: read

jobs:


  # Build .deb packages Ubuntu/Debian
  release_ubuntu_pkg:
    name: .deb packages / ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu:22.04
        - ubuntu:20.04
        - ubuntu:18.04
        - debian:buster
        - debian:bullseye
        - debian:bookworm
        - debian:sid

    container:
      image: ${{ matrix.os }}

    steps:
    - name: Set env
      shell: 'bash'
      id: 'env'
      run: |
        artifact_name="jxl-debs-amd64-${matrix_os/:/-}"
        echo ${artifact_name}
        echo "artifact_name=${artifact_name}" >> $GITHUB_OUTPUT
      env:
        matrix_os: ${{ matrix.os }}

    - name: Install build deps
      run: |
        rm -f /var/lib/man-db/auto-update
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y \
          build-essential \
          devscripts \
        #

    - name: Install git (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
        # Ubuntu 18.04 ships with git 2.17 but we need 2.18 or newer for
        # actions/checkout@v2 to work
      shell: 'bash'
      run: |
        apt install -y \
          libcurl4-openssl-dev \
          libexpat1-dev \
          libssl-dev \
          wget \
          zlib1g-dev \
        #
        git_version="2.32.0"
        wget -nv \
          "https://github.com/git/git/archive/refs/tags/v${git_version}.tar.gz"
        tar -zxf "v${git_version}.tar.gz"
        cd "git-${git_version}"
        make prefix=/usr -j4 install

    - name: Install gcc-8 (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
        # Compiler bug workaround: install and use gcc-8
      shell: 'bash'
      run: |
        apt install -y \
          gcc-8 \
          g++-8 \
        #
        update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        update-alternatives --set g++ /usr/bin/g++-8
        update-alternatives --set gcc /usr/bin/gcc-8

    - name: Set git safe dir
      run: |
        export GIT_CEILING_DIRECTORIES=/__w # only work before git v2.35.2
        git config --global --add safe.directory /__w/libjxl/libjxl

    - name: Checkout the source
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      with:
        submodules: true
        fetch-depth: 1

    - name: Stamp non-release versions
      # Stamps the built package with the commit date as part of the version
      # after the version number so newer release candidates can override older
      # ones.
      if: github.event_name != 'release'
      shell: 'bash'
      run: |
        # Committer timestamp.
        set -x
        commit_timestamp=$(git show -s --format=%ct)
        commit_datetime=$(date --utc "--date=@${commit_timestamp}" '+%Y%m%d%H%M%S')
        commit_ref=$(git rev-parse --short HEAD)
        sem_version=$(dpkg-parsechangelog --show-field Version)
        sem_version="${sem_version%%-*}"
        deb_version="${sem_version}~alpha${commit_datetime}-0+git${commit_ref}"
        dch -M --distribution unstable -b --newversion "${deb_version}" \
          "Stamping build with version ${deb_version}"

    - name: Stamp release versions
      # Mark the version as released
      if: github.event_name == 'release'
      shell: 'bash'
      run: |
        if head -n1 debian/changelog | grep UNRELEASED; then
          dch -M --distribution unstable --release ''
        fi

    - name: Install gtest (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
        # In Ubuntu 18.04 no package installed the libgtest.a. libgtest-dev
        # installs the source files only.
      run: |
        apt install -y libgtest-dev cmake
        for prj in googletest googlemock; do
          (cd /usr/src/googletest/${prj}/ &&
           cmake CMakeLists.txt -DCMAKE_INSTALL_PREFIX=/usr &&
           make all install)
        done
        # Remove libgmock-dev dependency in Ubuntu 18.04. It doesn't exist there.
        sed '/libgmock-dev,/d' -i debian/control

    - name: Install gmock-dev (debian:sid)
      # gtest-dev cmake depends on gmock-dev, but it is not installed by the
      # package.
      if: matrix.os == 'debian:sid'
      run: |
        apt install -y libgmock-dev

    - name: Remove libjxl-gimp-plugin package (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
      run: |
        # Gimp 2.8 is not supported.
        sed -i '/Package: libjxl-gimp-plugin/,/^$/d' debian/control

    - name: Build hwy
      run: |
        apt build-dep -y ./third_party/highway
        ./ci.sh debian_build highway
        dpkg -i build/debs/libhwy-dev_*_amd64.deb

    - name: Build libjxl
      continue-on-error: true
      run: |
        apt build-dep -y .
        ./ci.sh debian_build jpeg-xl


    - name: Setup tmate session
      uses: mxschmitt/action-tmate@53a5c23a925969671a6bb98ea70a4f650928ef93 # v3.16





